name: SonarQube Code Quality

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarqube:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Developer Info
        id: dev_info
        run: |
          DEVELOPER_NAME=$(git log -1 --pretty=format:'%an')
          echo "developer=$DEVELOPER_NAME" >> $GITHUB_ENV

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install dependencies
      - name: Install dependencies
        run: |
          npm install
          npm install --save-dev \
            eslint@8.57.0 eslint-config-react-app babel-eslint \
            eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y eslint-plugin-import \
            @babel/plugin-transform-private-methods @babel/plugin-transform-private-property-in-object \
            @babel/plugin-transform-class-properties @babel/plugin-proposal-private-property-in-object \
            jest @testing-library/react @testing-library/jest-dom

      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx || false

      - name: Run Prettier Check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" || false

      # Run tests
      - name: Run tests
        env:
          CI: true
        run: |
          npm test -- --coverage --verbose || echo "Tests failed. Continuing to SonarQube scan."

      # Add sonar-project.properties file
      - name: Configure SonarQube
        run: |
          echo "sonar.projectKey=Gen-ai" > sonar-project.properties
          echo "sonar.projectName=Gen-ai" >> sonar-project.properties
          echo "sonar.projectVersion=1.0" >> sonar-project.properties
          echo "sonar.sourceEncoding=UTF-8" >> sonar-project.properties
          echo "sonar.sources=src" >> sonar-project.properties

      # Run SonarQube Scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1.0.0
        env:
          SONAR_HOST_URL: https://sonarq.synchroni.xyz
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_GenAI }}
        with:
          args: -Dsonar.projectKey=Gen-ai -Dsonar.projectBaseDir=.

      # Check SonarQube Quality Gate Status
      - name: Verify SonarQube Quality Gate
        run: |
          echo "Checking SonarQube Quality Gate Status..."
          sleep 10

          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN_GenAI }}: \
            "https://sonarq.synchroni.xyz/api/qualitygates/project_status?projectKey=Gen-ai" | jq -r '.projectStatus.status')

          echo "Quality Gate Status: $STATUS"
          echo "status=$STATUS" >> $GITHUB_ENV

          if [[ "$STATUS" == "ERROR" ]]; then
            echo "SonarQube Quality Gate Failed! Blocking merge."
            exit 1
          else
            echo "SonarQube Quality Gate Passed!"
          fi

      # Send Notification to Teams
      - name: Send Notification to Teams
        run: |
          SONARQUBE_REPORT_URL="https://sonarq.synchroni.xyz/dashboard?id=Gen-ai"

          curl -H "Content-Type: application/json" -d '{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "SonarQube Scan Completed",
            "themeColor": "0076D7",
            "title": "SonarQube Scan Completed",
            "text": "SonarQube scan completed for Gen-ai. Click below to view the report.",
            "sections": [
              {
                "activityTitle": "Quality Gate Result",
                "text": "'"${{ env.status }}"'"
              }
            ],
            "potentialAction": [
              {
                "@type": "OpenUri",
                "name": "View Report",
                "targets": [
                  {
                    "os": "default",
                    "uri": "'"${SONARQUBE_REPORT_URL}"'"
                  }
                ]
              }
            ]
          }' ${{ secrets.TEAMS_WEBHOOK_URL }}
